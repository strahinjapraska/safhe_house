

# This file was *autogenerated* from the file gen_modulus.sage
from sage.all_cmdline import *   # import sage library

_sage_const_91 = Integer(91); _sage_const_2048 = Integer(2048); _sage_const_95 = Integer(95); _sage_const_4096 = Integer(4096); _sage_const_130 = Integer(130); _sage_const_165 = Integer(165); _sage_const_171 = Integer(171); _sage_const_8192 = Integer(8192); _sage_const_354 = Integer(354); _sage_const_368 = Integer(368); _sage_const_16384 = Integer(16384); _sage_const_558 = Integer(558); _sage_const_1298 = Integer(1298); _sage_const_65536 = Integer(65536); _sage_const_2705 = Integer(2705); _sage_const_131072 = Integer(131072); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1)
desired_size = [
                (_sage_const_91 ,   _sage_const_2048 ), 
                (_sage_const_95 ,   _sage_const_4096 ), 
                (_sage_const_130 ,  _sage_const_4096 ), 
                (_sage_const_165 ,  _sage_const_4096 ),
                (_sage_const_171 ,  _sage_const_8192 ), 
                (_sage_const_354 ,  _sage_const_8192 ),
                (_sage_const_368 ,  _sage_const_16384 ),
                (_sage_const_558 ,  _sage_const_16384 ),
                (_sage_const_1298 , _sage_const_65536 ),
                (_sage_const_2705 , _sage_const_131072 )
                ]
for d in desired_size:
    q = next_prime(_sage_const_2 **(d[_sage_const_0 ]))
    while True: 
        if q%(_sage_const_2 *d[_sage_const_1 ]) == _sage_const_1 : 
            break 
        q = next_prime(q) 
    
    print("let n = "+ str(d[_sage_const_1 ]))
    print("let p = Integer::from_str_radix(\""+str(q)+"\", 10).expect(\"Cannot convert\")") 

