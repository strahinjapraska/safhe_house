

# This file was *autogenerated* from the file gen_modulus2.sage
from sage.all_cmdline import *   # import sage library

_sage_const_354 = Integer(354); _sage_const_8192 = Integer(8192); _sage_const_368 = Integer(368); _sage_const_16384 = Integer(16384); _sage_const_558 = Integer(558); _sage_const_1298 = Integer(1298); _sage_const_65536 = Integer(65536); _sage_const_2705 = Integer(2705); _sage_const_131072 = Integer(131072); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1)
desired_sizes = [
    (_sage_const_354 ,  _sage_const_8192 ),
    (_sage_const_368 ,  _sage_const_16384 ),
    (_sage_const_558 ,  _sage_const_16384 ),
    (_sage_const_1298 , _sage_const_65536 ),
    (_sage_const_2705 , _sage_const_131072 )
]
  
for d in desired_sizes: 
    bit_size = d[_sage_const_0 ] 
    n = _sage_const_2  * d[_sage_const_1 ]

    k = ceil(_sage_const_2 **bit_size / n)

    while True:
        q = k * n + _sage_const_1 
        if is_prime(q):
            break
        k += _sage_const_1 

    assert(ceil(log(q,_sage_const_2 ).n()) == d[_sage_const_0 ]) 
    assert(q%n == _sage_const_1 ) 

    print("let n = "+ str(d[_sage_const_1 ])+";")
    print("let p = Integer::from_str_radix(\""+str(q)+"\", 10).expect(\"Cannot convert\");") 

